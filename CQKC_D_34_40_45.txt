//
// From DCQKCD listing of 4-sep-74 11:53 contained in file:
// bitsavers.informatik.uni-stuttgart.de/pdf/dec/pdp11/xxdp/diag_listings/1140_45/028_MAINDEC-11-DCQKC-D_D_1140_1145_INSTRUCTION_EXERCISER_Sep74.pdf
//
// All values in octal unless otherwise noted.
//
//
// Syntax:
//
// = address                    set address origin
// nnnnnn [nnnnnn] [nnnnnn]     one to three 16-bit octal word values (instructions, operands and data)
// b nnn                        single byte value, pc incremented by 1
// = nnnnnn                     set pc origin, subsequently incremented by 2/1 for word/byte values
// : nnnnnn                     consistency check: pc of the previous word must match this value
// :: nnnnnn                    consistency check: pc of the current word must match this value
//
//
// Process with txt2abs program to do consistency checks and generate .abs "absolute format" file
// for use by absolute loader (see Makefile) of various emulation program.
//
//
// Status:
//
//  Untested on PDP-11/04 system (use "#define 11/04")
//  Runs on 11/04 CPU board using PUniBone (use "#define PB_11/04")
//
//  Runs on 11/05 emulator
//  Untested on 11/05 hardware
//
//  Runs on 11/20 emulator (cpu20 of UniBone, use "#define 11/20")
//
//  Runs on 11/34 emulator (use "#define 11/34")
//  Untested on 11/34 hardware
//
//  Runs on 11/40 emulator
//  Untested on 11/40 hardware
//
//  Untested on 11/45 hardware
//
//  Switch register options tested on 11/40,34 emulator:
//  ok          Relocation 28kW or below
//  ok          Relocation above 28kW using MMU
//  ok          Relocation via RK disk emulator (--swreg xxxx31)
//  ok          Tested with KW11-L (line clock) & KL11 (serial console) emulators
//  untested    Operation with emulated parity error etc.
//  untested    Operation with other disk devices (RF, RP, RC, RS04)
//
//
//  Searching:
//  Note that for each page number shown in the program listing of the PDF document
//  the corresponding comment "// page NN" appears below.
//
//
//  Memory map:
//
//  20  iot vec
//  24  p.fail vec
//  30  scopeA vec
//  34  .hlt vec
//  60  tk vec
//  114 parity vec
//
//  120 mamf
//   164
//
//  172 patch vars
//   176 psw save for later inspection
//   200
//
//  200 entry points
//  204
//  210
//   214
//
//  244 FIS vec
//  250 mem mgt vec
//
//  300 patch area start (grows up)
//   300 CQKC_E0_FIX
//    316 (first free)
//
//   320 PSW_USER
//    344 (first free)
//
//   332 PB_11/04 TTYCHK debug (NB: conflicts with PSW_USER above!)
//    354 or 362 (first free, depends on particular debug code varient)
//
//   362 LMA_HIGHER
//    400 (first free)
//
//   476
//  500 stkptr stack (grows down)
//
//   576
//  600 kptr stack (grows down)
//
//  610 pdwn
//  ...
//  32436 end
//
//
// Conditional compilation: (can be set here with #define or with "--def xxx" arguments to txt2abs)
//
#define CQKC_E0_FIX
//      A bug in the RESTPS entry point of the CLRTBIT routine is fixed by including a patch based on a
//      correction included in the CQKC E0 revision.
//
//  #define 11/20
//      Changes to support running on the 11/20:
//          SWAB insn does *not* change V-bit. Don't believe it? I didn't either until I read this:
//          bitsavers.org/pdf/dec/pdp11/1173/EK-DCJ11-UG-PRE_J11ug_Oct83.pdf
//          PDF page 230, Table C-1, item 6 "SWAB does *not* change V"
//
//  #define 11/04
//      Changes to support the 11/04:
//          In cpchk make 11/04 look like an 11/05.
//
//  #define 11/34
//      Changes to support the 11/34:
//          Stack overflow detection differences.
//          Different illegal range definitions due to added MTPS=1064xx MFPS=1067xx insns.
//
//  #define PSW_USER
//      Begin pass #0000 in user mode instead of kernel mode (gets to failure quicker).
//
//  #define LMA_HIGHER
//      Start probe for last memory address at address higher than default of zero.
//
//  #define START_TTYCHK
//      Start with TTYCHK test.
//
//  #define PB_11/04
//      Changes to support 11/04 testing using PUniBone.
//
//
// jks@jks.com
// 2019-2021
//
//
// Common switch register settings:
//
// 100000 15 halt on error
// 040000 14 loop current subtest
// 020000 13 inhibit error print
// 010000 12 inhibit relocation
// 004000 11 inhibit subtest iteration
// 002000 10 ring bell on error
//
// CQKC-specific:
// 001000 09 inhibit relocation above 28kW (set 12 or 09 or neither, but never both)
// 000400 08 load PDP-11/45 ubreak reg from swreg<7:0>
// 000200 07 enable end-of-pass typeout (value inverted in CQKC_G2)
// 000100 06 inhibit clock interrupts (after test completes)
// 000040 05 enable relocation via all available disks
// 000020 04 enable random disk relocation address (else always zero)
// 000010 03 enable relocation via i/o device
// 000007    field: relocation i/o device code
// 000001        RK disk
//
// Typical values used:
// 14200       // swreg: inh reloc, inh subtst iter, eo-pass-print, no i/o device (WORKS)
// 5200        // swreg: inh reloc > 28kW, inh subtst iter, eo-pass-print, no i/o device (WORKS)
// 4200        // swreg: inh subtst iter, eo-pass-print, no i/o device (WORKS)
// 4231        // swreg: inh subtst iter, eo-pass-print, use rk (WORKS)
//


// pick one, either here or via "--def xxx" argument to txt2abs in Makefile
//#define 11/20
//#define 11/04
//#define 11/34
//#define PB_11/04

#ifdef PB_11/04
    #define 11/04
#endif


// page 7

// iotvec = .type, spl4
= 20
2564
200

#ifdef PB_11/04
// prereq #1
// p.fail 024 = start 0200, spl7
    200
    340
#else
// p.fail 024 = pdwn, spl7
    610
    340
#endif

// 030 = scopeA, spl4
1014
200

// 034 = .hlt, spl7
3212
340
: 36

// tkvec = tkisr, spl4
= 60
3130    // listing obscured, but = tkisr
200
:: 64

//#ifdef PB_11/04
#ifdef notdef
    // catch lk interrupts if still enabled from previous testing
    = 100
    102
    2
#endif

// parity & p.fail
// .mamf
= 120
12737   4356    114
12737   340     116
12737   6       4
12700   172100
12702   1
12720   1
6302
103374
207
: 162

// entry vectors
= 200
12707   5422    // start
12707   5532    // start1
12707   5600    // start3
: 212

// fis trap
= 244
246
2
: 246

// mmu psw
= 252
340
: 252

// pdwn
= 610
5737    764
100002
5037    177572
12737   632     24      // p.fail vec = pup @632
0

// pup
:: 632
12737   610     24      // p.fail vec = pdwn @610
12706   600
: 642


// page 8

5027
: 644
0
5267    177772
1375
4       666
137     5422
: 664

// .asciz
5015    47520   42527
20122   40506   46111
42105   5015
b 0
b 15
50012   51101
52111   20131   51105
47522   6522    12


// page 9

// memtbl
0
: 730
0
0
0
0

// .ascii
20040   42440   51122
51117
5015
b 0
b 134
b 0
b 0
b 0
b 0

= 762
// eabits
0

// opt.cp
//
// Values reported by CQKC OPT.CP=
//
// 100000 15 mmu
// 040000 14 eis (11/40 option)
// 020000 13 fpp 11/45
// 010000 12 fis 11/40
// 004000 11 stack lim (11/40 option)
// 002000 10 kw11-p
// 001000 09 kw11-l
// 000400 08 tty
// 000377    cp field: 06=11/45 04=11/40, 02=11/20, 00=11/05,04

400
: 764

// options
0
b 1
b 0

= 770
b 0
b 0
0
0
0
0

// $fills
// originally fill count = 1, fill char = 0
// we set count to zero
//1000
0

0
0
0
0

// scopea
122737  10      764
1005
: 1022


// page 10

5037    177766
: 1026
12737   177777  177744
32766   4000    2
1403
52737   4000    177776
32737   40000   177570   // swreg
1416
10116
10137   1006
163737  1004    1006
32737   400     177570   // swreg
1403
113737  177570  177770   // swreg
2
32737   4000    177570   // swreg
1006
5327
40
1353
113767  1150    177766
11601
746
40
: 1150


// page 11

// reloc
32737   10000   177570   // swreg
: 1156
1404
32737   1000    177570   // swreg
1465
105737  770
1062
13700   1010
10005
10204
160504
10203
5737    1004
1004
10237   1360
13702   1012
60204
20437   5504
101046
160204
5037    1004
32737   40      177570  // swreg
1007
32737   10      177570  // swreg
1410
113737  177570  757     // swreg
5037    762
4767    112
102003
12022
20003
1375
24042
1403
4767    1154
104400
20005
1371
162737  10      772
1742
105237  757
5037    772
10207
11707
0
: 1360

// waitio
13704
0
105737  770
1404
42704   160000
52704   40000
: 1402


// page 12

24414
1401
104400
62714   0
761
: 1416


// page 13

// iodev
4767    1106
: 1422
10546
52737   200     177776
142737  370     757
113705  757
6305
16505   2266
1005
4737    2556
12605
262
207
12737   6       4
261
: 1476


// page 14

5775    12
12737   5274    4
103020
32737   40      177570  // swreg
1403
105237  757
741
113705  757
6305
16567   4156    30602
4       32346
741
112737  3       760
10427
0
10446
6216
5416
12667   322
113737  757     772
13727   762
0
123727  757     4
3415
6367    177762
6367    177756
6367    177752
6367    177746
12735   21
12735   10000
12535
12546
12776   1732    0
62716   2
12736   240
4767    222
16735   306
16735   310
11537   1364
10035
16735   176
16535   2
614
12716   1740
2
15504
100011
104400
16535   6
162705  12
105337  760
: 1760


// page 15

1347
634
112737  3       760
162705  12
12735   2046
16735   204
16735   206
11537   1364
10235
16735   74
16746   177560
56516   4
12675   0
240
731
12716   2054
2
13504
100007
104400
16555   4
105337  760
1340
733
12605
66700   177460
66702   177454
4767    442
242
167     177344
0

// dskadr
32737   20      177570  // swreg
: 2130
1426
10046
13700   772
6300
6300
60146
5516
11667   36
46067   2226    30
60116
5516
12667   26
5720
46067   2226    16
12600
207
: 2206


// page 16

12727   0
0
12727   0
0
207

// adrtab
0
: 2226
0
163350
163350
177774
20000
177152
170370
176400
176400
177145
170370
170400
170400
177777
177777

// devtbl
0
: 2266
2306
2330
2352
2374
0
2450
0

// rk
220
: 2306
177412
177412
177410
177406
177404
503
505
1

// rf
204
: 2330
177470
177466
177464
177462
177460
103
105
1
: 2350


// page 17

// rp
254
: 2352
176722
176724
176720
176716
176714
103
105
1

// rc
210
: 2374
177442
177442
177452
177450
177446
103
105
1

// rp04
176700
: 2416
176732
0
0
254
176734
176706
176704
176702
176700
161
171
40011

// rs04
172040
: 2450
172040
0
0
204
172046
172046
172044
172042
172040
161
171
40011
: 2500

// savval
12737   10      772
10446
12704   730
: 2514


// page 18

10024
11024
10224
11224
12604
207
: 2530

// clrtbit
13746   177776
11627

// retpsw (2540)
0
: 2540
42716   20

// respsw (2546)
12746   2554
2
207

// Fixed bug in CQKC_D0. IODEV raises spl to 4 during operation. But when RESTPS is called to
// restore the spl it does so via an rti. An rti cannot change the spl psw field if used from user mode
// by definition. And IODEV is called is called in user mode as part of the overall strategy of running
// all tests in 4 different base psw modes: Kk0, Kk0T, Uu0 and Uu0T. After IODEV exits the psw ends up
// set to Uu4 instead of Uu0. This causes the subsequent test, TTYCHK, to fail. It spins waiting for the
// TTY tx to interrupt. And it never does because the spl is 4!

// The fix, which is present in CQKC_E0, is for RESTPS to force the psw back to Kk mode via a direct psw write.
// This is valid from user mode because the psw register is not protected against user writes (e.g. with MMU).
// Then the subsequent restore of the previous psw spl via the rti will work since it is always in Kk mode.

// restps
:: 2556

#ifdef CQKC_E0_FIX
    12707   300         // jmp 300      ; patch location
#else
    16746   177756      // mov retpsw, -(sp)    ; original insn
#endif

#ifdef CQKC_E0_FIX
    // patch is placed at 300 which shouldn't conflict with anything (usp is 600/576 and down, ksp is 500/476 and down)
    = 300
    
    42737   177400  177776      // bic #177400, psw     ; from CQKC_E0: cm/pm = kernel mode
    13746   2540                // mov retpsw, -(sp)    ; original insn from above (but using mode 3 addressing)
    12707   2546                // jmp respsw
    :: 316
#endif

= 2562
771                 // jmp respsw 


// page 19

// .type
10046
: 2564
17600   2
62766   2       2
32737   400     764
1403
112046
1003
5726
12600
2
4767    26
122726  12
1366
16746   176142          // listing obscured, but $fills is at neg offset
105366  1
2770
4767    2
772
105737  177564
100375
116637  2       177566
207
: 2670

// cnvdat
4767    2226            // listing obscured, but $savr is at 5124 which is +2226 from here
: 2674
12704   3102
10201
5003
12700   6
167     100

// page 20

// cnvadr
4767    2202
: 2720
12704   3102
162701  2
10105
5003
105737  770
1423
42701   17777
6301
6101
6101
6101
6301
62701   172340
11101
12700   6
6301
6103
77003
42705   160000
60501
5503
12700   10

// cnvdig
12705   3
: 3020
5002
6203
6001
106002
5305
1373
12705   5
241
106002
5305
1374

62702   260
110244
5300
1355
4767    2054
207
: 3070

b 0
b 0

:: 3074
// blkb 6 (i.e. 6 bytes of zeros)
0
0
0
:: 3102

b 40
b 0
:: 3104


// page 21

// typdat
4767    177562
: 3106
4       3074
207

// typadr
4767    177574
: 3120
4       3072
207

// tkisr
240
: 3130
13746   177562
42716   177600
22716   3
1005
4       752
5726
0
2
122716  15
1004
4       752
5726
2
112667  175534
4       740
2


// page 22

// .hlt
5737    177570          // swreg
: 3214
100001
0
32737   20000   177570  // swreg
1117
4767    1666
13702   1000
4767    177424
16767   177624  320
16767   177620  314
4       3564
16602   16
124242
4       003601
4767    177600
16702   175462
1411
6302
16267   4156    175420
4       742
4767    424
454
4       3607
16602   20
4767    177534
122737  10      764
1014
4       3614
13702   177766
4767    177510
4       3621
13702   177744
4767    177474
16602   16
124242
105737  770
1012
5737    1004
1415
: 3430
4       3626
163702  1004
4767    177436
406
4       3633
16601   16
4767    177432
4767    1454
32737   2000    177570   // swreg
1402
: 3476


// page 23

4       3640    // listing obscured, but is bell
: 3502
5737    177570  // listing obscured, but is swreg
100001
0
5737    5322
1407
5037    5322
5000
5300
1376
137     5422
105737  761
1402
137 4402
2
: 3552

// digtab
30460
31462
32464
33466
5015    40520   51523
21440

// passes
30060   30060
: 3576
b 0
b 40
50126   36503
b 0
b 120
53523   75
50103   36525
b 0
b 105
51122   75
50122   36503
b 0
b 120
41520   75

// bell
7
: 3640

// success
5015
52040   42510   50440
44525   45503   41040
47522   47127   43040
54117   45040   46525
51520   47440   42526
20122   44124   20105
40514   54532   42040
43517   20123   40502
45503   30040   31061
32063   33065   34067
20071   40520   51523
20043
: 3746

// passno
30060   30060
b 0
= 3756  // .even


// page 24

// pntregs
16200   4200
:3760
16203   4222
22703   730
1406
12302
4767    177102
5300
1373
207
4       4066
12301
5721
4767    177072
4       4136
12302
4767    177046
4       4144
12301
5721
4767    177044
4       4136
12302
4767    177020
207
: 4064

// .ascii
51105   47522   20122
47117   50040   47522
51107   46501   51040
46105   41517   52101
47511   6516
b 12
b 107
47517   20104
42101   51522   75
40504   40524   75
40502   20104   42101
51522   75
: 4154

// device .ascii
30060
45522
43122
50122
41522
50122
51522
54130
46515
: 4176

// regs
1
6
6
10
6
: 4210


// page 25

11
11
1
4

// regadr
0
: 4222
177400
177460
176710
177440
176700
172040
0
730
: 4242

// reco
10046
5015
105737  177560
100375
113700  177562
42700   200
122700  177
1007
4       755
241
6015
6215
6215
757
122700  15
1004
4       752
5725
205
11067   174404
4       740
42700   177770
6315
6315
6315
50015
735
: 4354


// page 26

// .parsrv
5737    177570   // swreg
100001
0
4       707
110637  000761
137     3212
105037  761
5001
5737    764
100032
12702   77406
5037    172340
10237   172300
12737   200     172342
10237   172302
12737   400     172344
10237   172304
5037    172306
12737   7600    172356
10237   172316
12737   1       177572
12737   4530    114
12737   4710    4
12737   4722    250
5721
: 4524
776
4       4744
4767    176356
5
5737    764
100002
5237    177572
5002
14103
10211
21102
1016
5102
10211
21102
1012
5402
1367
4       4771
4       5064
10302
4767    176264
411
4       5075
: 4624


// page 27

4767    176252      // slightly obscured, but a "7" given that it's same offset (typdat) as 3 insns below
4       5110
11102
4767    176240
4       752
5737    177570   // swreg
100001
0
5
12737   4356    114
12737   5274    4
12737   252     250
137     5600
4       4771
4       5031
751
: 4720

62737   200     172344
12701   20000
12737   1       177572
2
: 4742

// .asciz
5015    42515   47515
54522   40440   42104
42522   51523   44440
20123
b 0
b 15
50012   51101
52111   20131  51105
47522   20122   47516
20124   42504   42524
52103   42105   47440
20116
b 0
b 101
42104   42522
51523   51440   40503
116
40504   40524   51440
40503   20116   51117
43511   42040   52101
20101   20075
b 0
b 40
42107   42040
52101   36501   40
41040   20104   40504
40524   20075
b 0
= 5124  // .even


// page 28

// $savr
10546
: 5124
10446
10346
10246
10146
10046
16607   14

// $restr
12666   14
: 5146
12600
12601
12602
12603
12604
12605
207

// lddsp
13727   1000
: 5170
0
12746
0
6316
6316
6316
52667   177760
113767  1011    177753
105737  770
1403
13737   172344  5172
13737   5172    177570   // wr_swreg (really display reg)
207
: 5242


// page 29

// ktabrt
12737   5357    5326
: 5250
13716   177576
62716   2
416

// reserr
12737   5374    5326    // "6" obscured, but same as above
: 5270
412

// erprt
12737   340     177776
: 5300
5737    5322
1401
0
12737   5340    5326
5227
0
4
0
5037    772
137     3212
: 5336

// .asciz
5015    51124   50101
42520   20104   47524   // listing looks like "47324", but really "47524" if the ascii is recoded
32040
b 0
b 15
45412   30524
20061   41101   51117
124
5015    42522   42523
53122   42105   44440
51516   20124   51124
50101
: 5416
b 0
= 5422  // .even


// page 30

// start
5
: 5422
12706   600
105037  771
5737    42
1405
5737    32174
100002
110637  771

// determine last memory address
:: 5454
12737   5476    4       // mov #5476, *4

#ifdef LMA_HIGHER
    12707   362

    = 362
    12737   2       6   // mov #2, *6
    12700   157700      // mov #157700, r0
    12707   5472        // return, but skip the "clr r0"
    ::400
#else
    12737   2       6   // mov #2, *6
#endif

= 5470
5000        // clr  r0
5720        // tst  *r0++
776         // br   .-2
162700  2   // sub  #2, r0
10027       // mov  r0, *pc++

// lstmem
0
: 5504

105737  771
1003
162737  4000    5504

:: 5522

#ifdef PSW_USER
    12707   320             // goto patch
    240     240             // nop; nop
    
    = 320
    12737   32372   1012    // mov #(endtag+2), @#frstmem
    12737   140000  177776  // mov #CM_USER, @#psw
    12706   600             // mov #KPTR, sp (usp)
    12707   5600            // return (goto start3)
    :: 344

    = 5532
#else
    12737   32372   1012    // mov #(endtag+2), @#frstmem
    423                     // jmp start3
#endif

// start1
:: 5532
12737   2564    20

4       32277
4567    176474
0
16737   177772  1012
4       32314
4567    176454
0
16737   177772  5504
// fall through ...

// start3 (common join for start, start1)
:: 5600
5037    1000
105037  770
4737    120
12737   1600    32006
12737   20040   1150
105737  771
1403                // beq start2
12737   401 1150    // mov #401, itcnt
// fall through ...

// start2
:: 5644
12706   500
: 5646
12737   5274    4
12737   5264    10
12737   2       12

#ifdef PB_11/04
    240     240     240     // nop; nop; nop    don't patch p.fail vec
#else
    12737   610     24      // p.fail vec = pdwn @610
#endif

12737   340     26
12737   5244    250


// page 31

12737   2564    20
:5720
12737   200     22
12737   1014    30
12737   3212    34
12737   200     36
5037    5322
5037    772
4737    5166
105037  761
52737   100     177560

// cpchk (opt.cp)
105727
: 6000
0
1126
12737   6       4
12737   12      10
12700   4
261
5037    177766
5600
261
5737    177772
5600
261
105737  177777
5600

#ifdef 11/04
    // make 11/04 appear as an 11/05 by preventing this test from trapping
    :: 6056
    5000    240     // clr r0; nop (force 11/05 behavior because clr mem_r0 traps on 11/04)
#else
    5037    177700  // clr @#177700 (clr mem_r0, clears if 11/05, timeout trap for other cpus)
#endif

6300                // asl r0
10002
261
5737    177572
103402
52702   100000
5004
261
72404
103402
52702   40000
261
170500
170000
103402
52702   20000
261
75000
103402
52702   10000
261
::6146

#ifdef PB_11/04
    // problem #1 bus timing changes does NOT seem to fix this issue
    // 86504 insn cycles into run
    //  following don't show Unibus cycles on memory_trace because of trap or int addr deco
    //5037    160000      // nomem: trap 4 OK
    //5037    177600      // mmu pdr/par: trap 4 OK
    //5037    177700      // r0: NO TRAP (i.e. access worked)
    //5037    177770      // ubreak: trap 4 OK
    5037    177772      // pirq: trap 4 OK
    //5037    177774      // slr: before trap 4, AHI always stuck to ones!!!
                        // BUT works when PUNIBONE_DELAY >= 15!
#else
    5037    177774      // clr slr
#endif

103402
52702   4000
261
: 6160


// page 32

5737    172540
: 6164
103402
52702   2000
261
5737    177546
103402
52702   1000
5737    177564
103402
52702   400
12737   5274    4
12737   5264    10
10237   764
4       32264
4767    174632
4       752
105267  177520
: 6260


// page 33

// rel0
:: 6262

#ifdef START_TTYCHK
    12707   27640       // jmp ttychk
#else
    #ifdef START_KT_SECT_7
        12707   26572       // jmp rel7
    #else
        10700
        5740
    #endif
#endif

10037   1010
12737   0       5176
4737    5166
13767   5172    746
10700
162700  6314
10037   1004
10701
167     714
: 6330

// page 34

// x28
177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0,0,0
177777  0       0
0       0

177777  177777  177777      // .word -1,-1,-1,-1,0,0
177777  0       0

: 7244

10702
: 7246
62702   12
12707   1152

// rel00
0
: 7260


// page 35

// rel1
10700
: 7262
5740
10037   1010
12737   1       5176
4737    5166
12767   5172    3776
10700
162700  7314
10037   1004
10701
: 7324

// check branch insns

// cc0
257
103407
102406
1405
100404
2403
3402
101401
101001
104400
: 7350

// cc1
270
100003
2002
3001
2401
104400
: 7364

// cc2
262
102003
2402
3401
2001
104400
: 7400

// cc3
261
103002
101001
3001
104400
: 7412

// cc4
264
1003
3002
101001
3401
: 7424


// page 36

104400
104000


// test unary cc

// clr0
277
: 7432
244
5000
103404
102403
1002
100401
3401
104400

// tst0
277
: 7454
244
5700
103404
102403
1002
100401
101401
104400

// com0
257
: 7476
266
5100
103004
102403
1402
100001
2401
104400

// adc0
261
: 7520
5500
103003
102402
1001
2001
104400

// ror0
261
: 7536
6000
103404
102003
1402
100001
3001
104400

// dec0
277
: 7556
242
5300
: 7562


// page 37

103004
: 7564
102003
1402
100401
3401
104400

// inc0
257
: 7600
5200
103404
102003
1402
100001
3001
104400

// neg0
277
: 7620
242
5400
103003
102002
1401
2001
104400

// asl0
261
: 7640
6300
103004
102003
1002
100401
101401
104400

// rol0
6100
: 7660
103402
3401
2001
104400

// asr0
6200
: 7672
103003
102002
1001
2401
104400

// sbc0
277
: 7706
5600
103002
102401
3401
104400


// page 38

// swab0
5400
: 7722
300
103403
102402
1001
2001
104400
104000

// check reg selection
5000
: 7742
277
6100
10002
6302
10203
6303
10304
6304
10405
6305
10546
50416
50316
50216
50016
22726   37
1401
104400
: 10010

// check all bits can be set/clr in all regs
257
112700  377
6100
103776
5200
1401
104400

12700   20
5002
261
6002
5300
1374
5102
1401
104400

12703   100000
6203
103376
5203


// page 39

1401
: 10070
104400
112704  177401
60404
103376
5704
1401
104400

12705   1
6305
102376
6305
103002
5705
1401
104400

// register volatility
5002
: 10134
5102
10203
257
6002
6202
10304
5302
1375
5203
1002
5204
1401
104400

// 11/45 gs/gd reg xfer
32737   20      177776
: 10174
1052
10146
10627
0
10727
0

5267    177772
16700   177766
10001
10102
10203
10304
10405
152737  340     177776
10506
10627
: 10244


// page 40

0
16706   177730
142737  340     177776
26700   177760
1004
6367    177714
1350
411
10046
10146
10246
10346
10446
10546
104400

16706   177662
12601
10400
: 10324

// unary word insns addr mode 1
401
: 10326
0
10702
162702  4
5012

// ror1
261
6012
101402
100001
2001
104400

// dec1
257
261
5312
103001
3401
104400

// adc1
257
261
5512
103403
102002
100001
1001
104400

//rol1
6112
103003
102002
1001
: 10420


// page 41

100001
104400

// rol1a
6112
101402
102401
100001
104400

// asr1
6212
103003
102002
1001
100001
104400

// ror1a
6012
103403
102002
1401
100401
104400

// inc1
261
5212
103003
102402
1401
100401
104400

// sbc1
5612
103403
102402
1401
100401
104400

// sbc1a
261
5612
103403
102002
1401
100001
104400

261
5512
100401
104400

// asl1
261         // sec
6312        // asl @r2  (100000 => 0, cc = 0111)
103003      // bcc asl1
: 10554


// page 42

102002      // bvc asl1
1001        // bne asl1
100001      // bpl .+4
// asl1:
104400      // hlt

// com1
5112        // com @r2  (0 => 177777, cc = 1001)

//#ifdef PB_11/04
#ifdef notdef
    5037    176 // clr tmp
    401         // jmp com1+2
#else
    103002      // bcc com1
    102401      // bvs com1
    100401      // bmi .+4
#endif

// com1:
104400      // hlt

// tst1
:: 10600
250
5712
103403
102402
100001
1001
104400

// neg1
262
5412
103002
102401
1001
104400

// dec1a
5312
103001
1401
104400
104000
: 10642

// unary byte insns addr mode 1

401
0
10703
162703  4
10304
5204
5013

// incb1
261
105513
100402
105214
773
102401
104400
242
105214
103402
102001
100401
104400
: 10714


// page 43

// rolb1
106114
103002
102001
1401
104400

// sbcb1
105614
103002
102401
100401
104400

// aslb1
106313
103002
102001
1401
104400

// negb1
105413
103402
102401
1401
104400

// decb1
277
105313
103002
102401
1001
104400

// rorb1
241
106013
103002
102001
100001
104400

// comb1
241
105114
103002
102401
1401
104400

// asrb1
106213
102002
105514
774
103401
1401
104400
: 11046


// page 44

// asrb1a
106214
106214
103002
102001
1001
104400

105314
1401
104400

// rorb1a
261
106014
103402
102001
100401
104400

242
105314
102401
104400

// decb1a
261
105313
103002
102401
100401
104400

// swab1
:: 11132
277         // scc
313
103402

#ifdef 11/20
    102001  // bvc swab_fail  11/20 SWAB does *not* change V-bit, hence should be set from scc above
#else
    102401  // bvs swab_fail  all other models should clear V-bit here
#endif

100001
// swab_fail:
104400      // HLT
: 11144

// tstb1
105714
103402
102401
100401
104400

// aslb1a
105014
1401
104400
106313
103402
102001
100401
104400

// comb1a
105113
103002
: 11202


// page 45

102401
100001
104400

313
1401
104400

105213
261
105613
1401
104400
22713   400
1401
104400
104000
: 11242

// unary word ops addr modes 2 & 4 (auto inc/dec)
401
0
10704
162704  4
10405
5015

// tst2
277
244
5725
103402
102401
1401
104400

// com4
5145
103001
100401
104400

// ror2
241
6024
103002
102001
100001
104400

// inc4
257
5244
102002
1401
100401
104400

// swab2
261
: 11340


// page 46

324
103401
100401
104400

// neg2
5425
103001
100401
104400

5044
1401
104400

// adc2
261
6045
261
5525
102401
100401
104400

// asr2
262
6224
103002
102401
100401
104400

// rol4
262
6144
103002
102401
100401
104400

5645
103001
104400

// dec2
5325
103402
102001
100001
104400

// asl4
6324
102401
104400
6344
103003
102402
1401
100401
: 11474


// page 47

104400

22724   177774
1401
104400
20405
1401
104400
104000
: 11516

// unary byte ops addr modes 2 & 4

401
0
10705
162705  4
10500
10002
5202
5010

// comb2
277
241
105125
103002
102401
100401
104400

// adcb2
105542
1401
104400
105525
103401
1001
104400

// rorb4
263
106045
103033
102402
1401
100401
104400

// rolb2
277
106122
103403
102402
1401
100001
104400

// asrb2
257
106225
: 11634


// page 48

103402
102001
100401
104400

// asrb2a
105242
277
106222
103402
102401
100001
104400

// aslb4
266
106345
103003
102402
1401
100401
104400

// decb2
105322
103002
102001
100001
104400

// sbcb4
105645
103402
102401
1401
104400

// negb4
105442
103002
102401
100401
104400

// tstb2
105725
103401
1401
104400

// tstb2a
105722
1401
100401
104400

// swab4
261
342
103401
100401
104400
: 11770


// page 49

// incb2
277
105225
103003
102402
1401
100001
104400

22227   601
1401
104400
20205
1401
104400
104000
: 12026


// unary word ops addr modes 3 & 5

402
0
0
10703
162703  4
5013
10300
5743
10013
10304

257
5733
1401
104400

// ror5
261
6053
103402              // listing obscured, but jump to .+(2+1) words
102001
100401
104400

// asr3
257
6234
102001
100401
104400

// asl3
250
6333
103002
102401
100401
104400
: 12126


// page 50

// dec5
277
5354
103003
102002
1401
100001
104400

// neg5
5453
103002
102401
100401
104400

// com3
262
5134
103001
102001
104400

// inc3
5233
103001
100001
104400

// adc5
5554
103402
102001
100401
104400

// rol3
257
6134
102002
102001
1401
104400

// sbc5
5253
5654
103401
1401
104400
104000
: 12242

// unary byte ops addr modes 3 & 5

403
0
0
0
10702
5742
5742
10200
: 12262


// page 51

5010
5742
5742
10022
5200
10022
10200
10205

// comb5
105152
103001
100401
104400

105752
1401
104400

// asrb5
262
106255
103002
102401
100401
104400

// incb3
105232
103001
100001
104400

// rorb5
241
106055
103003
102002
1001
100001
104400

// aslb3
106332
103002
102401
100401
104400

// adcb5
105552
103401
100401
104400

// rolb3
277
106135
101402
102401
100001
: 12416


// page 52

104400

352
100401
104400

// sbcb3
261
105635
103401
1401
104400

// decb5
105432
105352
103001
1401
104400
104000
: 12454


// unary word ops addr mode 6 (pc)

5027
0
10700
24040
: 12464


// page 53

// rol6
277
6167    177764
103403
102402
1401
100001
104400

// com6
5167    177746
103002
102401
100401
104400

// asr6
6267    177732
103402
102001
100401
104400

// neg6
277
5467    177714
103003
102402
1401
100001
104400

// ror6
277
6067    177674
103003
102402
1401
100401
104400

// sbc6
5667    177656
103402
102001
100001
104400

// inc6
242
5267    177640
103403
102002
1401
100401
104400

// asl6
6267    177622
261
6367    177614
103002
102401
: 12646


// page 54

100401
104400

// dec6
5367    177600
103002
102001
100001
104400

// adc6
5567    177564
103402
102001
100401
104400

242
367     177546
100401
104400
22710   200
1401
104400
104000
: 12726


// unary byte ops (even/odd) addr mode 6 (pc)

// tstb6
12700   13272
63700   1004
5067    326
277
244
105767  316
103403
102402
1001
100001
104400

257
105767  277
1401
104400

// sbcb6
105667  266
103402
102401
1401
104400

// incb6
261
105267  250
100403
105567  243
771
103001
102401
: 13034


// page 55

104400

// aslb6
106367  226
103003
102002
1001
100001
104400

// adcb6
242
105567  207
103402
102001
100401
104400

// rorb6
261
106067  171
103402
102001
100401
104400

// comb6
105167  154
103002
102401
100401
104400

// negb6
262
105467  137
103002
102401
100001
104400

// rolb6
106167  123
103402
102001
100401
104400

// asrb6
106267  106
103002
102401
100401
104400

// incb6a
105267  72
103002
102401
1401
104400
: 13206


// page 56

// decb6a
105367  57
103003
102402
1401
100401
104400

// swab6
367 40
103401
100401
104400

// rolb6a
106167  26
103002
102001
1401
104400

// tst6
5767    12
103402
102401
1401
104400

401
0
104000
10702
62702   12
12707   1152

// rel11
0
: 13310


// rel2
10700
5740
10037   1010
12737   2       5176
4737    5166
13767   5172    3744
10700
162700  13344
10037  1004
10701
: 13354


// unary word ops addr mode 7

403
0
0
0
10700
: 13366


// page 57

5740
5740
5040
10002
10240
5720
5720
10210
10200
277
244
5772    2
1401
104400

// sbc7
277
5672    177776
103002
102401
100401
104400

// asl7
277
241
6372    2
103002
102401
100401
104400
: 13462

// dec7
257
5372    2
103402
102401
100401
104400

// asr7
262
6272    177776
103002
102401
100401
104400

// ror7
241
262
6072    177776
101402
102401
100001
104400

// neg7
262
5472    2
: 13544


// page 58

103002
102401
100401
104400

// swab7
250
372 177776
103401
100401
104400

// com7
262
5172    2
103002
102401
100401
104400

372     2
100401
104400

// adc7
277
5572    177776
103402
102401
100001
104400

// inc7
5272    2
102001
100401
104400

// rol7
257
6172    177776
103002
102001
1401
104400
104000
: 13666


// unary byte ops addr mode 7

5720
5210
5740
5010
10701

// sbcb7
263
105672  2
103003
102402
: 13712


// page 59

1401
100401
104400

// adcb7
277
105572  177776
103403
102402
1401
100001
104400

// comb7
105172  177776
103002
102401
100401
104400

// rorb7
241
106072  2
103002
102001
100001
104400

// incb7
105272  2
103002
102001
100401
104400

// decb7
105372  177776
103002
102401
100401
104400

// aslb7
106372  2
103002
102001
1401
104400

// asrb7
241
106272  177776
103002
102401
100401
104400

// negb7
105472  2
103402
102401
1401
: 14066


// page 60

104400

// rolb7
262
106172  177776
103002
102401
100401
104400

105272  177776
105272  177776
105572  177776
105172  177776
1401
104400
104000
: 14134


// binary ops addr mode 0

// mov0
277
10700
103002
102401
1001
104400

// sub0
10002
262
160002
103402
102401
1401
104400

// mov0a
244
10203
103401
1401
104400

// cmp0
257
272
20203
103403
102402
1001
100001
104400

// check add
10002
10203
60203
6302
20203
1401
: 14234


// page 61

104400

// shift bit thru r2/r5 and bit
5002
5202
402
6302
100407
10205
277
30205
103002
102401
1370
104400
10205
257
30205
100401
104400

// bis0
5002
277
50002
103002
102401
1001
104400

// bic0
10003
277
244
40003
103003
102402
1001
100001
104400

// bis0a
10004
5104
40004
5104
20004
1401
104400

10004
5104
10403
50003
103001
100401
: 14372


// page 62

104400

// add0
5203
1401
104400
10304
5103
261
6004
60304
103003
102002
1401
100001
104400
10700
22020
20007
1401
104400

// cmp0a
10700
62700   10
10002
20700
1002
20200
1401
104400
104000
: 14464


// binary ops addr mode 1

402
0
0
10704
5744
5044
10403
5043

// add1
5113
5214
262
61314
103002
102401
1401
104400

// cmp1
277
250
21314
103403
: 14534


// page 63

102402
1401
100401
104400

// bit1
277
244
31314
103002
102401
1401
104400

// sub1
277
245
5114
161314
103402
102401
1401
104400

// bis1
105013
313
270
11314
100001
104400
314
263
51314
103002
102401
100401
104400

// bic1
41314
103002
102401
100401
104400

// cmp1a
262
21314
103003
102402
1401
100001
104400

// sub1a
5013
261
6013
11314
: 14674


// page 64

5114
161314
103002
102001
100401
104400

// sub1b
277
161314
101402
102401
100001
104400

// mov1
11314
1401
100401
104400

// add1a
61314
103003
102002
1001
100001
104400

// add1b
5113
11314
61314
103402
102001
100401
104400

62714   2
5714
1401
104400
104000
: 15002


// binary ops addr mode 1

402
0
0
10705
5745
5045
10502
5042
5202
105112

// movb1
277
111215
: 15032


// page 65

// next 3 missing first digit or two -- lookup branch opcodes
103005
102404
1403
100002
105215
1401
104400

// cmpb1
106312
102376
106012
105315
106015
257
121512
102001
100401
104400

// bitb1
5003
261
6003
50315
273
131215
103002
102401
1401
104400

// bisb1
151215
103001
100401
104400

// bicb1
141215
103002
1401
100001
104400

105112
121215
1401
104400

// bicb1a
141512
1002
105712
1401
104400

402
0
: 15170


// page 66

0
10705
5745
105045
10504
105044
10403
105043
10302
105042

261
106112
111214
106112
111213
106112
111315
106112
106113
151215
131512
1426
151314
131413
1423
105213
121314
1020
106113
121315
1015
106212
131214
1412
106015
121415
1007
105314
141214
1004
111314
106213
141315
1401
104400
104000
: 15324


// binary word ops addr mode 2 & 4

10405
12715   1
: 15332


// page 67

// add2
12712   177777      // second word is -1
257
262
62225
103002
102401
1401
104400

// cmp2
262
24527   1
103002
102401
100401
104400

// bis2
54225
103001
100401
104400

// sub2
277
244
162245
103402
102401
1401
104400

// bic2
5442
5115
277
250
42225
103003
102402
1401
100401
104400

// bit2
12742   125252
12245
5125
262
34245
103002
102401
1401
104400

// bis2a
262
52225
103002
102401
100401
: 15502


// page 68

104400

42745   125252
5125
24245
1401
104400

// sub2a
5012
5122
162742  1
103402
102401
100401
104400
104000
:15542

10702
10205
124245
1401
104400
20237   1010
1372
104000


// binary ops addr modes 2 & 4

402
0
0
10703
5743

10300
10002
5302
10604
10605
5745

114046
20506
1021
20200
1017
122026
20406
1014
20003
1012
154640
20506
1007
: 15644


// page 69

20200
1005
142620
20406
1002
20003
1401
104400
104000

10003
112743  200
112743  377
10304
112744  177
122744  0
1401
104400

152324
100401
104400

// cmpb2
122324
103402
102001
100001
104400

// bitb2
261
134344
103002
102401
1401
104400

244
144344
1401
104400
104000
: 15764

// binary word ops addr modes 3 & 5

404
0
0
0
0
10701
10100
24040
10005
24545
10015
: 16012


// page 70

10502
10004
5740
10003
10042
5013
5014

// sub3
277
244
163235
103402
102401
1401
104400

// sub3a
52752   100000
62755   1
163235
103002
102001
100401
104400

// add3
5414
35255
1401
104400
23235
102401
104400
5152
257
63255
102001
100401
104400

// bic3
261
45235
103001
100401
104400

5155
23235
1401
104400
104000
: 16146


// binary byte ops addr modes 3 & 5

406
0
0
0
: 16156


// page 71

0
0
0

10700
24040
10003
10305
5743
10043
5213
10043
10304
5740
10044
5214
10044

// bitb3
261
12734   177001
112734  200
115433
115433
103401
104400
22715   600
1401
104400
24343
153433
153433
22715   100601
1401
104400
145453
145453
133433
1002
135433
1001
104400

// cmpb3
123453
1002
: 16310


// page 72

123453
1401
104400
104000
: 16320


// binary ops addr mode 6
402
0
0

13702   1004
10205
5065    16326
12762   1       16324
56265   16324   16326
6362    16324
6362    16324
103370
22765   52525   16326
1401
104400
12762   177777  16324
46562   16326   16324
36265   16324   16326
1401
104400
6365    16326
26265   16324   16326
1401
140400

// add6
257
66265   16324   16326
103002
102001
100001
104400

// sub6
6362    16324
166265  16324   16326
103401
1401
104400

112700  377
10062   16324
12765   177777  16326
166500  16326
1401
104400
66265   16324   16326
6362    16324
5162    16324
36265   16324   16326
: 16556


// page 73

1401
104400
5162    16324
26265   16324   16326
1401
104400
26200   16324
1352
104000
: 16610


// binary byte ops addr mode 6

// bitb6
13702   1004
10204
10403
5203
10305
261
12762   125252  16754
112763  177125  16754
16264   16754   16756
52764   125125  16756
136263  16754   16754
1401
104400

146264  16754  16756
103401
104400
126364  16754  16756
1401
104400

146365  16754  16756
126265  16754  16756
1401
104400

136564  16756  16756
1401
104400
104000
: 16750

406
0
0
: 16756


// binary word ops addr mode 7

0
0
0
: 16764


// page 74

0

10700
24040
10002
24242
10012
10203
24043
10013

// mov7
261
12777   100000  177740
17777   177734  177734
103001
100401
104400
6377    177722
102001
1401
104400

// cmp7
27777   177706  177706
103402
102401
100401
104400

// sub7
167777  177670  177670
103003
102002
1401
100401
104400

// add7
6277    177650
67777   177644  177644
103003
102002
1401
100001
104400

47777   177624  177624
1401
104400

57777   177612  177612
100401
104400

27777   177600  177600
1401
104400
: 17164


// page 75

104000
: 17166


// misc pc ops

5000
5067    72
10707
120707
30707
60007
105707
5507
21007
131007
62707   0
23707   1004
133707  1004
240

163707  1004
63707   1004
240
24607
132607
26707   12
166707  6
46707   2
401
0
104000
: 17272

10702
62702   12
12707   1152

// rel22
0
: 17306


// rel3
10700
5740
10037   1010
12737   3       5176
4737    5166
13767   5172    2104
10700
162700  17342
10037   1004
10701
: 17352

// binary byte ops addr mode 0

12703   125252
: 17356


// page 76

10304
140304
22704   125000
1401
104400

5004
150304
22704   252
1401
104400

110404
22704   177652
1401
104400

132704  177525
1401
104400

105104
110404
22704   125
1401
104400

150304
105204
1401
104400
104000
: 17456


// binary byte ops addr mode 7

406
0
0
0
0
0
0
10700
24040
10060   177772
10060   177774
5260    177774
: 17514


// page 77
5740            // digits obscured, but tst opcode = 0057dd
10060   177770
10060   177772
5260    177772

5002
12703   2
12704   177774
12705   177776

5020
5010
13746   1004
61602
61603
61604
62605

112773  177777  17462
132772  377     17462
1401
104400

157374  17462   17472
105274  17472
1401
104400

105375  17472
5274    17472
127375  17462   17472
1401
104400

147375  17462   17472
1401
104400

105073  17462
: 17666

157473  17472   17462
106174  17472
103372
22772   177400  17462
1401
104400

372     17462
112775  200     17472

147572  17472   17462
106075  17472
: 17740


// page 78

103372
5772    17462
1401
104400
104000
: 17754

12702   1
10703
401
0
5723
10313
5213
12737   20124   4
63737   1004    4
13737   4       10

277
160212
104400
60222
104400
6342
104400
106512
104400
170412
104400
42202
104400
164202
104400
155202
104400
105532
104400
163302
104400
5733
104400
106533
104400
170453
104400
137702  177775
104400
105477  177773
104400
406

62716   2
52766   17      2
2
: 20136


// page 79

12706   500
12737   5274    4
12737   5264    10
104000
: 20160

10700
62700   12
277
110
402
250
775

// jmp1
103003
102002
1001
100001
104400

// jmp3
5002
10703
401
0
5723
10313
10300
62713   22
10300
133
402
5102
775
5202
1003
5720
20003
1401
104400

// jmp4
5002
10704
10400
402
5102
403
22424
5724
144
5202
1003
22020
20004
: 20314


// page 80

1401
104400

// jmp5
10703
401
0
5723
10313
62723   16
10300
402
5102
401
153
5202
1003
5740
20003
1401
104400

// jmp6
402
5102
402
167     177770
5202
1401
104400

// jmp7
12767   20424   20      // 3rd word obscured, but fwd ref to 7$ works out to be 20
63767   1004    12
402
5102
403
177     0
0
5202
1401
104400
104000
: 20444

// jsr insn
13705   1004
12702   20504
60502
277
242
4512
5702
1017
23705   1004
1014
414
205
: 20502


// page 81

// jsr1
103011          // next two obscured -- lookup opcode
102410
1007
100006
5002
12704   20466
61604
20405
1765
104400

// jsr1a
13704   1004
5000
12705   20560
60405
10502
12715   20576
60415
401
0
4435
5200
1013
413
5100
204

// jsr3
12703   20564
61603
20403
1003
5722
20205
1766
104400

// jsr3a
13704   1004
10405
10703
401
405
22323
277
4443
104400
414

// jsr4
103012
102011
1010
100007
12702   20642
61602
20204
1002
5724
: 20670


// page 82

204
104400

// jsr4a
401
405
10700
4767    177770
100407
104400
22020
20016
1401
104400
270
207

// jsr6a
104000
: 20730


// iottst
12705   20
10746
62716   40
12625
5000
52740   200

11015
11504
42710   357
52710   144
12003
10340
4
104400

12002

12715   200
12745   2564
10746
62716   177762
22626
1036
22603
1034
32703   140000
100413
1003
20204
1026
413
: 21044


// page 83

42704   30000       // obscured, but "#pum" is referenced below as 30000
52704   10000
20204
1017
404

52704   30000
20204
1012

5002
261
106100
102376
106300
103004
102003
1002
5700
1401
104400

42704   340
10437   177776
12706   500
104000
: 21136

// emt
5000
10746
62716   30
12637   30
262
13737   177776  32
265
104000
1433
104400
102027
105100
105500
106000
102023
100022
257
105400
102017
100016
242
261
105300
102012
: 21226


// page 84

100411
242
105200
103006
102005
100004
242
106200
102776
401
104400
2
105500
103003
1002
5700
1401
104400
12737   1014    30
5037    32
104000
: 21306


// trap
13737   34      30
10746
62716   42
12637   34
270
13737   177776  36
261
10700
264
104400
103401
104000
1401
104000
412
100401
104000
62700   4
20016
1401
104000
124646
32626
2

12702   36
12712   340
12742   3212
5042
12742   1014
: 21426


// page 85

104000
: 21430

10702
62702   12
12707   1152

// rel33
0
: 21444

10701
122737  4       764
101405
12737   2       31204
137     27640
: 21470


// rel4
10700
5740
10037   1010
12737   4       5176
4737    5166
13767   5172    1370
10700
162700  21524
10037   1004
10701

// ovflw (stack)
13767   177776  332
: 21542

5037    177776
4737    2532
52737   340     177776
10746
62716   146
11637   4
12737   340     6
13727   16
0
62716   100
12637   14
12737   340     16

12703   376
10313
10306
32767   140000  232
1015

5716
21666   177776

#ifdef 11/34
    240         ; (nop) dm5 DOES trap on 11/34 but CQKC expects 11/40 behavior which is no trap
#else
    12656       ; (mov *sp++, --**sp) dm5 does not trap on 11/40
#endif
: 21654

57636   0   ; sm7 and dm3 do not trap
: 21660


// page 86

#ifdef 11/34
    240 240     ; (nop nop) sm4 DOES trap on 11/34 but CQKC expects 11/40 behavior which is no trap
#else
    54676   0   ; (bis --*r6, **(r6+#0)) sm4 does not trap on 11/40
#endif
: 21664

5006
13766   20000   20000
423

156737  173     177777
12706   376
16646   177776
51616
61666   177776
105037  177777
451

12600
12602
12706   500
104400

443
62737   66      4
10306
112702  1
5000

// The following all need to trap.
// So for the 11/34 change them to something that does trap (bpt) as needed.
#ifdef 11/34
    3           ; (bpt) traps on 11/34
    6302
    3           ; (bpt) traps on 11/34
#else
    5016        ; dm1 doesn't trap on 11/34 but does on 11/40
    6302
    105226      ; dm2 doesn't trap on 11/34 but does on 11/40
#endif

6302
60746
6302
3
6302
4767    14
6302

#ifdef 11/34
    3 240               ; (bpt nop) traps on 11/34
#else
    50666   177776      ; dm6 doesn't trap on 11/34 but does on 11/40
#endif

410

50200
2
52700   1000
207

52700   400
2

12706   500
22700   1477
: 22046


// page 87

1401
104400

12706   600
12737   16      14
16737   177514  16
12746
0
10746
62716   6
2
12706   500
12737   5274    4
12737   2       6
104000
: 22130


// restrp
12702   22236
: 22134

63702   1004
132737  40      765
1402
5067    110
12737   22214   10
63737   1004    10
12203
1437
12204
10317
0
104400
104400
104400
405
12716   22226
63716   1004
2
20304
1760
5203
761
: 22234

// table of 11/40, 11/45 reserved instructions
7
77

#ifdef 11/34
    210
    237         // 00023n is 11/45 spl done via M[TF]PS on 11/34
#else
    210
    227
#endif

7000
7777

75040
76777

#ifdef 11/34
    107700      // on 11/34 MTPS=1064xx MFPS=1067xx
    107737
    
    107740
    107777
#else
    106400
    106477
    
    106700
    107777
#endif
: 22264


// page 88

170000
177777

0           // table terminator

12737   5264    10
104000
: 22302


// pswchk
105737  770
1072
13767   177776  144
5037    177776
4737    2532
13746   16
12704   177776
250
5714
1401
104400
113700  764
16000   32240

5737    764
100002
52700   170000
12702   1
30200
1423
5037    16
30227   20
1403
12737   2       16
5014
50214
11403
20203
1401
104400
244
40214
11403
1401
104400
6302
103351
5014
12637   16
12746
0
10746
62716   6
2
104000
: 22476


// page 89

13704   177776
112737  300     177776
4737    2532

// chksp
10603
257
112706  377
6006
103776
5206
1403
10602
10306
104400

10306

10600
10003

5043
112746  177777
22713   377
1002
20306
1401
104400

105226
5723
1002
20006
1401
104400

5143
144613
22713   177400
1002
20603
1401
104400

132627  377
1002
20600
1401
104400

12746   1
62706   2
: 22652


// page 90

12702   177401
120246
1004
122602
1002
20006
1401
104400
105037  177776
10446
10746
62716   6
2
104000
: 22714

12727   177776
0
10700
162700  4
5520
6340
102375
22767   77776   177754
1401
104400

// cmpn
10700
10002
5202
277
251
20002
103003
102402
1401
100401
104400

277
120200
103403
102402
1401
100001
104400
: 23014


// page 91

240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
240
104000
: 23076

10702
62702   12
12707   1152

// rel44
0
: 23112


// rel5
10700
5740
10037   1010
12737   5       5176
4737    5166
13767   5172    1462
10700
162700  23146
10037   1004
10701


// extinst (eis)
5000

// sxt0
277
6700
103005
102404
: 23170


// page 92

1403
100002
5200
1401
104400

// xor0
10700
10002
12703   177777
5102
243
74003
103404
102403
1402
20203
1401
104400

// sxt1
10700
22020
401
0
5700
6710
5002
5700
100001
5102
21002
1401
104400

// xor1
12710   100000
11002
277
74210
103007
102406
1005
100404
5710
1002
5402
102401
104400

// sxt4
10702
22222
401
0
12722   125252
6742

// xor24
74722
: 23342


// page 93

10700
5740
5100
74042
1401
104400

// xor6
12704   1
6767    60
74467   54
100423
6304
102373
100020
74467   40
100015
74767   32
10767   30
162767  4       22
5167    16
26767   12      6
1401
104400

402

0
0

// sxt6
12700   77777
6767    177764
1004
100403
103402
102401
401
104400

// sxt6a
12702   1
13703   1004
60002
6763    23450
1403
5267    177724
1401
104400

// sxt2
10703
402
0
0
5723
10304
: 23542


// page 94

250
6724
1401
104400

// sxt3
10467   177754
257
6733
1401
104400

// sxt5
270
6753
100401
104400

// xor35
12704   25252
74433
5002
74253
1405
100004
5104
20467   177712
1401
104400

// sxt7
5743
250
6773    2
1401
104400

// xor7
74473   2
20473   2
1401
104400
104000
: 23660

// sob
5005
407

5004
5705
1401
104400

5005
6004
467
: 23702


// page 95

12700   10
277
1012
100011
102010
103007
77005
1005
100004
102003
103002
5700
1401
104400

12702   100
12700   101
1414
100413
102412
103411
5300
20002
1006
257
77211
1403
100402
5702
1401
104400

12700   1
401
104400
77002

5700
1401
104400

12704   100000
403
5204
100403
104400

77404
104400

12703   100
77301
5703
: 24054


// page 96

1703
104400

5705

1401
104400

5205
77477
5704
1401
104400
104000
: 24102


// mrktst
10602
10705
10500
10546
10746
10746
10746
10746
10746
12746   6405
10605
4767    2
403
205
104400
407
20602
1402
104400
403
20005
1401
104400
10206
104000
: 24170


// page 97

// rtt1
13767   177776  166
: 24176

32767   20      160
1176
10746
62716   116
12637   14
16746   140
: 24224


// page 98

11637   16
52737   340     177776
: 24236


// page 99

5000
: 24240
52716   360
10746
62716   6
6
5200

42737   340     177776
22767   6       177760
1005
22700   177776
1406
104400
415
5700

1413
104400
411
12767   2       177726
730
5100
16766   30      2
2
12767   6       177704
12737   16      14
5037    16
104000
: 24362

// rtt2
401
0
122737  4       764
1002
167     200
16700   177756
105000
12702   144000
74002
1435
12702   44000
74002
1447
32700   140000
1062

12702   177777
12737   34240   177776
5002
12746   100
10746
62716   6
6
: 24466


// page 100

13700   177776
5702
1001
104400
22700   100
1436
104400
434

52737   30340   177776
5046
10746
62716   6
2
22737   174340  177776
1420
104400
416

52737   30200   177776
12746   340
10746
62716   6
6

22737   74200   177776
1401
104400

16737   177556  177776
104000
: 24612

10702
: 24614
62702   12
12707   1152

// rel55
0
: 24626


// rel6
10700
5740
10037   1010
12737   6       5176    // obscured, but #sect is 5176
4737    5166
13767   5172    1710
10700
162700  24662
10037   1004
10701
: 24672


// page 101

32737   40000   764
1002
167 1336

// ashl0
12700   1
12703   21
5067    14
10002
10705
10504
72502
113727  177776
0

6304
113746  177776
132716  2
1403
152767  2       177755
112637  177776
77214
153767  177776  177741
20504
1004
126767  177730  177727
1401
140400
5200
20003
1336

// ashr0
12700   177777
12703   177757
10002
10705
10504
72502
113727  177776
0

5402
6204
77202
113767  177776  177763
142767  2       177755
20504
1004
126767  177744  177743
1401
104400
5300
20003
: 25114


// page 102

1346

12746   37
12746   1
11600
10705
10503
5004
5002
73400
6303
6102
77003
20402
1002
20503
1401
104400
5216
21666   2
1356
22626

12746   177740
12746   177777
11600
10702
10204
5003
5005
262
73200
102410
5400
6204
6005
77003
20204
1002
20305
1401
104400
5316
21666   2
1353
22626
104000
: 25262

// mul0
12700   1
5016
10702
: 25272


// page 103

10227
0
5003
5004
10205
100001
5104
277
70200

102406
1405
73416

20204
1002
20305
1401
104400
5216
6300
102353

10702
5202
10227
0
5103
10204
6204
5104
70200

20204
1002
20003
1401
104400
104000
: 25400

// div0
12700   1
10737   25500
13703   25500
5002
277
71200

103421
100420
102010
: 25430


// page 104

22700   1
1014
32737   100000  25500
1410
410
10204
70400
60305
103403
23705   25500
1401
104400

6300
102346
401
0

5016
5000
12702   20
5067    12
10703
10304
72316
13727   177776
0

72400
113767  177776  177767
20304
1004
126767  177756  177755
1401
104400

5200
5216
20200
1351

// ashr1
5016
5000
5402

5067    12
10704
10405
72416
13727   177776
0
: 25614


// page 105

72500
113767  177776  177767
20405
1004
126767  177756  177755
1401
104400

5300
5316
20002
1351
104000
: 25654

122737  4       764
1002
167     354

// spl0
12702
237
12704   177776
11403
42703   177757

12767   230     10
12767   237     50
257
230
121403
1401
104400
32714   140000
1002
62703   40
5267    177752
26702   177746
2761
12702
230
52703   17
277
237
121403
1401
104400
32714   140000
1002
162703  40
5367    177752
26702   177746
2361
104000
: 26030


// page 106

// pirq0
12700   26172
12702   400
5003
12704   177772
5014
13737   177776  242
112737  340     242
12737   26170   14
12737   340     16
12737   26142   240
63737   1004    240
110337  177776
50214
100431
62737   2       240
6302
50214
240
104400

22014
1401
104400
62703   40
20214
12716   26102
63716   1004
6

1042
3104
7146
17210
37252
77314
177356

5014
12737   242     240
5037    242
105037  177776
12737   6       16
12737   16      14
104000
: 26244


// page 107

//mpi:
32737   140000  177776      // obscured, but #um is user mode of psw 140000
1537
10746
62716   144
12637   250
5046
10603
10346
105737  770
1423
13737   177640  177654
12737   6006    177614
122737  4       764
1406
13737   172240  172254
12737   6006    172214
62706   140000
240
10746
62716   24
12637   30
104000
5266    2
1417
104400
415
240
6506
6536
6576    0
240
1367
5116
6636

2
104400
105037  177776
12737   5244    250
12737   1014    30
12706   500
104000
: 26452

// halt1
10746
62716   22
11637   4
12637   10
0
104400
404
10716
62716   6
2
: 26506


// page 108

12737   5274    4
12737   5264    10
104000
: 26524

// reset1
277
13700   177776
277
5
23700   177776
1401
104400
10037   177776
104000
: 26554

10702
62702   12
12707   1152

// rel66
0
: 26570


// rel7
:: 26572
10700
5740
10037   1010
12737   7       5176
4737    5166
13767   5172    1014
10700
162700  26624
10037   1004
10701

// stklim
32737   4000    764
1512
12702   177774
5022
32712   20
1104
52712   340

12700   400
10042
22200
1401
104400

6300
103372
: 26704


// page 109

5042            // obscured, but opcode completely known
10746
62716   54
12637   4
13737   177776  6
10712

11206
10603
16304   336

32737   140000  177776
1403
10466   336
430

5066    336
104400

32737   140000  2

1013
10600
1011
26304   336
1006
5012
10705
62705   177750
20516

1406

5012
10463   336
12706   500
104400
10463   336
5022
12706   500
42712   340
12737   5274    4
12737   2       6
104000
: 27072


// page 110

// ktpdr
5737    764
100124
105737  770
1121
12702   27316
12705   100360
122737  4       764
1005
5062    4
5062    22
5205
12200
1423
12703   10
5004
40504
10410
21004
1012
5104
40504
10410
21004
1005
5404
100365

5020
77316
755
104400

773
104000
: 27214

// ktpar
12702   27334
12705   170000
122737  10      764
1001
5005
12200
1423
12703   10
5004
40504
10410
21004
1012
5104
: 27262


// page 111

40504
10410
21004
1005
5404
100365

5020
77316
755

104400

773
104000
: 27312
416

172300
177600
172200
172320
177620
172220
0

172340
177640
172240
172360
177660
172260
0
: 27350

// kt1
105737  770
1522
5037    172350
5037    172310
5037    177650
5037    177610
122737  4       764
1404
5037    172250
5037    172210
13746   250
13746   252
10746
62716   40
12637   250
13737   177776  252
5000
10702
12703   100000
14223
: 27460


// page 112

5700
1001
104400
451

13700   177776
300
6200
42700   177637
62700   100011
20037   177572
1031
12700   27460
20037   177576
1024
122737  4       764
1414
12700   362
120037  177574
1013
12700   23
120037  177575
1006
12700   27460
5720
20016
1001
2

104400
10716
62716   177654
2
12637   252
12637   250

10702
62702   12
12707   1152

// rel77
0

//ttychk
::27640
5037    1004
10701
32737   400     764
1002
167     556

//#ifdef PB_11/04
#ifdef notdef
    // record psw
    :: 27662
    12707   332     // jmp 332
    
    = 332
    13737   177776  176     // mov psw, @176    save psw to check spl
    32737   100     177564  // tst #100, tps
    1371                    // bne .-14
    12707   27672           // jmp 27672
    :: 354
#else
    32737   100     177564
    1374
#endif

= 27672
12737   27746   64
12737   200     66
: 27704


// page 113

// lots obscured, but can all be derived
012767  30034   114
117737  110     177566
105737  177564
100375
006237  177564
1                   // wait
440
6337    177564
2
122777  12      54
1020
6337    177564
52737   340     177776
13746   177776
4767    152564
752
52737   100     177564
5267    14
2

//#ifdef PB_11/04
#ifdef notdef
    // show tps after setting tpb
    12707   332     // jmp 332
    
    = 332
    13700   177564          // mov tps, r0
    13701   30030           // mov 30030, r1
    111137  177566          // movb @r1, tpb
    13700   177564          // mov tps, r0
    12700   30024           // mov #30024, r0       jmp w/o effecting cc of following tst
    105711                  // tstb @r1
    110                     // jmp @r0 (30024)
    :: 362
#else
    117737  6       177566  // movb @msg, tpb
#endif

= 30024
1745
5227
0
2

// .asciz
20015   15

// .even
= 30040
// kw11
10701
12737   30350   100
12737   30400   104
12737   300     102
12737   300     106
32767   2000    764
1407
12737   2       172542
12737   101     172540
415
32737   1000    764
1560

12737   100     177546
12767   177546  104
12767   240     174


// pri arb test
:: 30152
132737  20      177776
1143

32737   100     177570   // tst #0100, swreg
: 30166


// page 114

1137                        // bne arbex (test exit)

//#ifdef PB_11/04
#ifdef notdef
    // problem #3      TPS busy test that hangs
    12707   332     // jmp 332
    
    = 332
    13737   177776  176     // mov psw, tmp
    12700   30200           // mov #30200, r0       jmp w/o effecting cc of following bit
    32737   100     177564  // bit #100, tps
    110                     // jmp @r0 (30200)
    :: 354
#else
    32737   100     177564  // bit #100, tps
#endif

= 30200
1374
112737  300     177776
152737  100     177564
100374
13767   64      210
12737   30312   64
5027
0
240
240
240
113700
172540
100375
240

12737   30326   100
13737   100     104
105037  177776

22767   2       177732
1455
104400
453

42737   100     177564
6367    177712
2

5267    177704
12737   30350   100
12737   30400   104
414

// lksrv
5267    150420
12737   100     177546
32737   100     177570   // swreg
1402
5037    177546
2

// plksrv
5267    150372
12737   100     172542
12737   101     172540
32737   100     177570   // swreg
1402
5037    172540
2

0
: 30436


// page 115

13737   30436   64
42737   100     177564
12737   30350   100
12737   30400   104
104000
: 30470

32737   1000    764
1411
12737   30350   100
12737   300     102
52737   100     177546
: 30522


// page 116

32737   1       766
1506
12737   30572   70
12737   400     72
112737  1       770
105037  771
12737   101     177550
467

// prstrt
32737   100200  177550
3002
104400
461

105237  771
1002
104400
410

105737  177552
1005
105037  771
12737   30646   70
5237    177550
2

// prtst
32737   100200  177550
3003
104400
5746
426

113746  177552
1413
121637  770
1017
105237  770
1015
105237  770
105037  771
410
: 30716


// page 117

122737  1       770
1003
105237  771
1001
104400
5726
5237    177550
2
: 30746


// page 118

// end
4767    232
12737   5274    4
5037    177776
4767    151540
12706   600
32737   400     764
1433

//#ifdef PB_11/04
#ifdef notdef
    // problem #4
    240 240 240     // skip TPS busy test that hangs
    240
#else
    32737   100     177564
    1374
#endif

105737  177570   // swreg
100024
16702   147750
4767    151636
12702   3076
12703   3574
12704   3750
11223
12224
11223
12224
12737   3642    30030
52737   100     177564
5267    147700
116700  147660
26067   32252   147666
1002
167     776
16702   147654
6302
46002   32226
12737   16      14
5037    16
113737  1151    1150
16216   32206           // pswtab
32716   20
1406
112737  1       1150
16737   6       16
12746   5644
6
: 31204


// page 119

// stmm
5737    764
100401
207

32737   1000    177570   // swreg
1406
32737   10000   177570   // swreg
1010
167     614
32737   10000   177570   // swreg
1402
167     600
13727   177776
0
12737   200     177776
4767    151234
12700   77406
10037   172300
10037   172302
10037   172304
10037   172306
10037   172316
5037    172340
12737   200     172342
16737   442     172344
13737   172344  172346
62737   200     172346
12737   177600  172356
5046
32737   11000   177570   // swreg
1006
122737  10      764
1002
12716   20

10037   177600
10037   177602
10037   177616
16737   350     177640
13737   177640  177642
62737   200     177642
13737   172356  177656

122737  4       764
1424
10037   172200
10037   172202
10037   172216
16737   274     172240
13737   172240  172242
62737   200     172242
13737   172356  172256
: 31534


// page 120

11637   172516

5726
240
12737   1       177572
105237  770
4767    153402
13767   5172    576
12737   32054   4
12702   40000
5000

12704   32372
10203
60403
10013
12737   5274    4
32737   40      177570   // swreg
1007
32737   10      177570   // swreg
1431
113737  177570  757   // swreg
5046
13702   172344
6302
6302
6302
6302
6302
6116
6302
6116
6316
6316
6316
6316
112637  762
4737    1420
102005
12702   40000
12022

20302
1375
10302
12703   1000
24042
1403
4737    2502
104400

20003
1371
162737  10  772     // third word obscured, but #devid = 772
: 31766


// page 121


// next 4 lines heavily obscured, but all can be derived from the source code

// beq retry
// this(31770) - retry(31600) = 170, -1 = 167, -167 = 611, beq(001400) | 611 = 001611
001611
: 31770

// incb @#dev
105237  757

// clr @#devio
005037  772

// add #40, (pc)+
062727  40

0
13737   172344  172340
13737   172346  172342

12706   600
5037    177776
16746   177222
12746   32046
2

240
137     5644
: 32052


// page 122

// endmem
22626
5037    177572
122737  4       764
1402
5037    172516
240

12767   1600    177700
105037  770
137 30754

// done
32737   100     177564
1374
105037  177566
105737  177564
100375

#ifdef NO_END_DELAY
    240 240     // nop; nop
    240 240     // nop; nop
#else
    5000        // clr r0
    162700  1   // 1$: sub #1, r0
    1375        // bne 1$
#endif

5               // reset
105737  177570  // tstb swreg
100002
4       32330
13702   42
1404
4712
240
240
240
137     5600

// pswtab
:: 32206

#ifdef PB_11/04
    // problem #5
    0           // .
    20          // T
    0           // .
    20          // T
#else

#ifdef PSW_USER
    140000      // U.       do user mode first
    140020      // UT
    0           // K.
    20          // KT
#else
    #ifdef PSW_KERNEL
        0           // K.   only ever kernel mode (never trace trap)
        0           // K.
        0           // K.
        0           // K.
    #else
        0           // K.
        20          // KT
        140000      // U.
        140020      // UT
    #endif
#endif

#endif

144000      // 11/45 only
144020
44000
44020

// cppass
177774
: 32226


// page 123

177774
177770
177760
177760
: 32236


// page 124

// pswbit
377
377
357     // don't check T-bit on 11/40
170357
170357

// pastab (number of passes)
2
2
4       // 11/40
10      // 11/45
10
: 32262

// .asciz
5015    50117   27124
50103   20075
b 0
b 15
46012   53517
46040   46511   52111
77
44510   44107   46040
46511   52111   77
5015    42040   50503
41513   42040   47117
105

// .even
= 32346

// .ascii
5015
54130   47040   52117
47440   20116   52502
6523    12

// .even
= 32370
0

// chktyp
12706   500
4       3642
773

12706   500
104400
774

12706   500
5000
10701
10037   177570   // swreg
5200
104000
: 32432
767
: 32434


// page 125

// .end
